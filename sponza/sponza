transform {
 vertex {
  uniform mat4 viewProjectionTransform;
  attribute vec3 position;
  gl_Position = viewProjectionTransform*vec4(position,1);
 }
}

surface {
 varying vec2 vTexCoords;
 vertex {
  attribute vec2 texCoords;
  vTexCoords = texCoords;
 }
 fragment {
  uniform vec4 diffuseColor;
  uniform sampler2D diffuseTexture;
  out vec4 color;
  color = diffuseColor * texture(diffuseTexture, vTexCoords);
 }
}

screen {
 varying vec2 vTexCoords;
 vertex {
  attribute vec2 position;
  gl_Position = vec4(position,0,1);
  vTexCoords = (position+1)/2;
 }
}

image {
 fragment {
  uniform sampler2D image;
  out vec4 color;
  color =  texture2D(image, vTexCoords);
 }
}

sRGB {
 fragment {
  uniform sampler2D framebuffer;
  float sRGB(float c) { if(c>=0.0031308) return 1.055*pow(c,1.0/2.4)-0.055; else return 12.92*c; }
  vec3 c = texture2D(framebuffer, vTexCoords).rgb;
  out vec4 color;
  color = vec4(sRGB(c.r), sRGB(c.g), sRGB(c.b), 1);
 }
}
