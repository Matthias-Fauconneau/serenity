transform {
 vertex {
  uniform mat4 transform;
  attribute vec3 position;
  gl_Position = transform*vec4(position,1);
 }
}

mask {
 varying vec2 vTexCoords;
 vertex {
  attribute vec2 texCoords;
  vTexCoords = texCoords;
 }
 fragment {
  uniform sampler2D maskTexture;
  vec4 diffuseMask = texture(maskTexture, vTexCoords);
  if(diffuseMask.a < 0.5) discard;
 }
}

forward {
 varying vec2 vTexCoords;
 varying vec3 vNormal;
 varying vec4 shadowPosition;
 vertex {
  attribute vec2 texCoords;
  vTexCoords = texCoords;
  attribute vec3 normal;
  vNormal = normal;
  uniform mat4 shadowTransform;
  shadowPosition = shadowTransform * vec4(position,1);
 }
 fragment {
  uniform sampler2D diffuseTexture;
  vec4 diffuseMask = texture(diffuseTexture, vTexCoords);
  if(diffuseMask.a < 0.5) discard;
  uniform sampler2DShadow shadowMap;
  const float zBias = 4./8192;
  float shadowFactor = 0;
  for(float i=-0.5; i<=0.5; i++) for(float j=-0.5; j<=0.5; j++) //2x2 PCF + 2x2 HW PCF
       shadowFactor += textureProj(shadowMap,
                                     vec4(shadowPosition.xy+vec2(i,j)/textureSize(shadowMap, 0), shadowPosition.z-zBias, shadowPosition.w));
  shadowFactor /= 4;
  uniform vec3 lightDirection;
  vec3 normal = normalize(vNormal);
  float diffuseLight = shadowFactor * max(0,dot(lightDirection, normal));
  uniform vec3 diffuseColor;
  out vec4 color;
  color = vec4( (0.1+diffuseLight) * diffuseColor * diffuseMask.rgb, diffuseMask.a);
 }
}

screen {
 varying vec2 vTexCoords;
 vertex {
  attribute vec2 position;
  gl_Position = vec4(position,0,1);
  vTexCoords = (position+1)/2;
 }
}

image {
 fragment {
  uniform sampler2D image;
  out vec4 color;
  color =  texture2D(image, vTexCoords);
 }
}

sRGB {
 fragment {
  uniform sampler2D framebuffer;
  float sRGB(float c) { if(c>=0.0031308) return 1.055*pow(c,1.0/2.4)-0.055; else return 12.92*c; }
  vec3 c = texture2D(framebuffer, vTexCoords).rgb;
  out vec4 color;
  color = vec4(sRGB(c.r), sRGB(c.g), sRGB(c.b), 1);
 }
}
