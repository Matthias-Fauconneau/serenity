# Rock process definition

# Parses resolution from input folder name as "name-resolution"
if !resolution: resolution = PhysicalResolution

# Concatenates image slice files in a volume
source = Source

# Denoises
denoise = 'median'
if !denoise: denoised = source
if denoise == 'average': denoised = average
 shift = ShiftRight source
 averagex = Average shift
 averagexy = Average averagex
 average = Average averagexy shift='0'
if denoise == 'median': denoised = median
 median = Median source

# Resamples
if !resample: process-resolution = resolution # Forwards original resolution
if !resample: resampled = denoised # Forwards original volume
if resample: resampled mipmap = Resample denoised resolution process-resolution # Resamples from input resolution to process resolution

#Clips histograms to the inscribed cylinder
if source.box: histogram-density.cylinder = '0'
if source.box: histogram-crop.cylinder = '0'
if source.box: histogram-squaredRadius.cylinder = '0'

# Density distribution
if !thresholdFromSource: histogram-density = Histogram resampled
if thresholdFromSource: histogram-density = Histogram source
histogram-density-normalized = Normalize histogram-density
distribution-density = KernelDensityEstimation histogram-density

# Threshold determination
threshold = 'otsu'
if threshold == 'otsu': threshold otsu-parameters otsu-interclass-deviation = Otsu histogram-density # Recommended robust statistic method
otsu-interclass-deviation-normalized = Normalize otsu-interclass-deviation
if threshold == 'gradient': threshold gradient-mean = MaximumMeanGradient source distribution-density # Use this method for backward compatibility only
if threshold == 'lorentz': threshold lorentz-parameters lorentz-rock lorentz-notrock lorentz-pore lorentz-notpore = LorentzianMixtureModel distribution-density # Explicit model

# Segments
pore.cylinder = $source.cylinder # Also clips to cylinder before distance field evaluation
pore = Binary resampled threshold
colorize = Colorize pore resampled # For visualization

# Computes squared distance to / position of nearest background voxel
distancex positionxx = DistanceX pore
distancey positionyx positionyy = DistanceY distancex positionxx
distance positionx positiony positionz = DistanceZ distancey positionyx positionyy

# Computes skeleton (medial axis)
skeleton = Skeleton positionx positiony positionz
skeleton-tiled = ZOrder skeleton

# Rasterizes skeleton voxel as maximum spheres
sphere-bins = Bin skeleton-tiled
maximum = Rasterize sphere-bins

# Computes crop volume (including rock) before minimalRadius, transpose or floodfill dependency
if crop.cylinder: crop-maximum = Crop maximum source.crop
if !crop.cylinder: crop-maximum = maximum
histogram-crop = Histogram crop-maximum clip='0' # including rock
volume-crop = Sum histogram-crop
volume-total = volume-crop # for backward compatibility [deprecated]

# Discards small pores
minimalSqRadius = '0'
pruned = ThresholdClip maximum minimalSqRadius

# Crops processed volume to remove boundary bias effects (before floodfill to avoid hidden connections)
if crop.cylinder: crop = Crop pruned source.crop
if !crop.cylinder: crop = pruned

# Transposes to use an alternate connectivity axis (FloodFill always use Z)
transpose = Transpose crop
if transpose=='X': transposed = transpose
if transpose=='Y': transposed = Transpose transpose
if transpose=='Z': transposed = crop
if !transpose: transposed = crop

floodfill = '1'
if !floodfill: connected = transposed # Forwards unconnected pore space
if floodfill: connected = FloodFill transposed # Flood fills pore space

# Computes histogram of maximum squared radii
histogram-squaredRadius = Histogram connected clip='1'
# Computes pore space volume
volume = Sum histogram-squaredRadius
# Computes porosity (= pore space volume / total volume )
porosity = Div volume volume-crop
# Square roots radii histogram (As bins are not uniformly spaced anymore, the result cannot be interpreted as a discrete probability density)
histogram-radius = SquareRootVariable histogram-squaredRadius
# Normalize histogram
histogram-radius-normalized = Div histogram-radius volume-crop
# Computes kernel density estimation from radii histogram (i.e. pore size distribution)
volume-distribution-radius = KernelDensityEstimation histogram-radius bandwidth='0.5'
# Normalizes probability density on total volume (including background (i.e not the same as probability density normalization))
distribution-radius = Div volume-distribution-radius volume-crop
# Scales radius (e.g to original pixel or physical resolution)
 volume-distribution-radius-scaled = ScaleDistribution volume-distribution-radius process-resolution
 histogram-radius-scaled = ScaleDistribution histogram-radius process-resolution
 histogram-radius-normalized-scaled = ScaleDistribution histogram-radius-normalized process-resolution
 distribution-radius-scaled = ScaleDistribution distribution-radius process-resolution

# Export
 sqrt = SquareRoot crop
 sqrt-scaled = ScaleValues sqrt process-resolution
 cdl = ToCDL sqrt-scaled
 ascii = ToASCII sqrt-scaled
 # Exports to compressed PNG
  png-source = ToPNG source
  png-denoised = ToPNG denoised
  png-colorize = ToPNG colorize
  png-distance = ToPNG distance
  png-skeleton = ToPNG skeleton
  png-connected = ToPNG connected
# Exports to BMP (when writing to disk, it is faster to write PNGs and pipe to BMP-only tools (e.g using ImageMagick convert))
  bmp-source = ToBMP source
  bmp-denoised = ToBMP denoised
  bmp-colorize = ToBMP colorize
  bmp-distance = ToBMP distance
  bmp-skeleton = ToBMP skeleton
  bmp-connected = ToBMP connected

# Tools
REV = REV
prune = Prune
