#pragma once
#include "sdna.h"
const string sdnaVersion = "BLENDER-v268"_;
struct bAction {
    ID id;
    ListBase<> curves;
    ListBase<> chanbase;
    ListBase<> groups;
    ListBase<> markers;
    int flag;
    int active_marker;
    int idroot;
    int pad;
};
struct AnimMapper {
    struct AnimMapper* next;
    struct AnimMapper* prev;
    bAction* target;
    ListBase<> mappings;
};
struct NlaStrip {
    struct NlaStrip* next;
    struct NlaStrip* prev;
    ListBase<> strips;
    bAction* act;
    AnimMapper* remap;
    ListBase<> fcurves;
    ListBase<> modifiers;
    char name[64];
    float influence;
    float strip_time;
    float start;
    float end;
    float actstart;
    float actend;
    float repeat;
    float scale;
    float blendin;
    float blendout;
    short blendmode;
    short extendmode;
    short pad1;
    short type;
    void* speaker_handle;
    int flag;
    int pad2;
};
struct AnimData {
    bAction* action;
    bAction* tmpact;
    AnimMapper* remap;
    ListBase<> nla_tracks;
    NlaStrip* actstrip;
    ListBase<> drivers;
    ListBase<> overrides;
    int flag;
    int recalc;
    short act_blendmode;
    short act_extendmode;
    float act_influence;
};
struct rctf {
    float xmin;
    float xmax;
    float ymin;
    float ymax;
};
struct Ipo {
    ID id;
    ListBase<> curve;
    rctf cur;
    short blocktype;
    short showkey;
    short muteipo;
    short pad;
};
struct BoundBox {
    float vec[24];
    int flag;
    int pad;
};
struct bAnimVizSettings {
    int ghost_sf;
    int ghost_ef;
    int ghost_bc;
    int ghost_ac;
    short ghost_type;
    short ghost_step;
    short ghost_flag;
    short recalc;
    short path_type;
    short path_step;
    short path_viewflag;
    short path_bakeflag;
    int path_sf;
    int path_ef;
    int path_bc;
    int path_ac;
};
struct bPose {
    ListBase<> chanbase;
    struct GHash* chanhash;
    short flag;
    short pad;
    int proxy_layer;
    int pad1;
    float ctime;
    float stride_offset[3];
    float cyclic_offset[3];
    ListBase<> agroups;
    int active_group;
    int iksolver;
    void* ikdata;
    void* ikparam;
    bAnimVizSettings avs;
    char proxy_act_bone[64];
};
struct bGPdata {
    ID id;
    ListBase<> layers;
    int flag;
    short sbuffer_size;
    short sbuffer_sflag;
    void* sbuffer;
};
struct bMotionPathVert {
    float co[3];
    int flag;
};
struct bMotionPath {
    bMotionPathVert* points;
    int length;
    int start_frame;
    int end_frame;
    int flag;
};
struct VolumeSettings {
    float density;
    float emission;
    float scattering;
    float reflection;
    float emission_col[3];
    float transmission_col[3];
    float reflection_col[3];
    float density_scale;
    float depth_cutoff;
    float asymmetry;
    short stepsize_type;
    short shadeflag;
    short shade_type;
    short precache_resolution;
    float stepsize;
    float ms_diff;
    float ms_intensity;
    float ms_spread;
};
struct GameSettings {
    int flag;
    int alpha_blend;
    int face_orientation;
    int pad1;
};
struct CBData {
    float r;
    float g;
    float b;
    float a;
    float pos;
    int cur;
};
struct ColorBand {
    short flag;
    short tot;
    short cur;
    short ipotype;
    CBData data[32];
};
struct ImageUser {
    struct Scene* scene;
    int framenr;
    int frames;
    int offset;
    int sfra;
    char fie_ima;
    char cycl;
    char ok;
    char pad;
    short multi_index;
    short layer;
    short pass;
    short flag;
    int pad2;
};
struct IDPropertyData {
    void* pointer;
    ListBase<> group;
    int val;
    int val2;
};
struct IDProperty {
    struct IDProperty* next;
    struct IDProperty* prev;
    char type;
    char subtype;
    short flag;
    char name[64];
    int saved;
    IDPropertyData data;
    int len;
    int totallen;
};
struct bNodeLink {
    struct bNodeLink* next;
    struct bNodeLink* prev;
    struct bNode* fromnode;
    struct bNode* tonode;
    struct bNodeSocket* fromsock;
    struct bNodeSocket* tosock;
    int flag;
    int pad;
};
struct bNodeStack {
    float vec[4];
    float min;
    float max;
    void* data;
    short hasinput;
    short hasoutput;
    short datatype;
    short sockettype;
    short is_copy;
    short external;
    short pad[2];
};
struct bNodeSocket {
    struct bNodeSocket* next;
    struct bNodeSocket* prev;
    struct bNodeSocket* new_sock;
    IDProperty* prop;
    char identifier[64];
    char name[64];
    void* storage;
    short type;
    short flag;
    short limit;
    short in_out;
    struct bNodeSocketType* typeinfo;
    char idname[64];
    float locx;
    float locy;
    void* default_value;
    short stack_index;
    short stack_type;
    int resizemode;
    void* cache;
    int own_index;
    int to_index;
    struct bNodeSocket* groupsock;
    bNodeLink* link;
    bNodeStack ns;
};
struct bNode {
    struct bNode* next;
    struct bNode* prev;
    struct bNode* new_node;
    IDProperty* prop;
    struct bNodeType* typeinfo;
    char idname[64];
    char name[64];
    int flag;
    short type;
    short pad;
    short done;
    short level;
    short lasty;
    short menunr;
    short stack_index;
    short nr;
    float color[3];
    ListBase<bNodeSocket> inputs;
    ListBase<bNodeSocket> outputs;
    struct bNode* parent;
    ID* id;
    void* storage;
    struct bNode* original;
    ListBase<> internal_links;
    float locx;
    float locy;
    float width;
    float height;
    float miniwidth;
    float offsetx;
    float offsety;
    int update;
    char label[64];
    short custom1;
    short custom2;
    float custom3;
    float custom4;
    short need_exec;
    short exec;
    void* threaddata;
    rctf totr;
    rctf butr;
    rctf prvr;
    short preview_xsize;
    short preview_ysize;
    int pad2;
    struct uiBlock* block;
};
struct bNodeInstanceKey {
    int value;
};
struct bNodeTree {
    ID id;
    AnimData* adt;
    struct bNodeTreeType* typeinfo;
    char idname[64];
    struct StructRNA* interface_type;
    bGPdata* gpd;
    float view_center[2];
    ListBase<bNode> nodes;
    ListBase<> links;
    int type;
    int init;
    int cur_index;
    int flag;
    int update;
    short is_updating;
    short done;
    int pad2;
    int nodetype;
    short edit_quality;
    short render_quality;
    int chunksize;
    rctf viewer_border;
    ListBase<> inputs;
    ListBase<> outputs;
    struct bNodeInstanceHash* previews;
    bNodeInstanceKey active_viewer_key;
    int pad;
    struct bNodeTreeExec* execdata;
    void* progress;
    void* stats_draw;
    void* test_break;
    void* update_draw;
    void* tbh;
    void* prh;
    void* sdh;
    void* udh;
};
struct PackedFile {
    int size;
    int seek;
    void* data;
};
struct PreviewImage {
    int w[2];
    int h[2];
    short changed[2];
    short changed_timestamp[2];
    int* rect[2];
    struct GPUTexture* gputexture[2];
};
struct ColorManagedColorspaceSettings {
    char name[64];
};
struct Image {
    ID id;
    char name[1024];
    ListBase<> ibufs;
    struct GPUTexture* gputexture;
    struct anim* anim;
    struct RenderResult* rr;
    struct RenderResult* renders[8];
    short render_slot;
    short last_render_slot;
    short ok;
    short flag;
    short source;
    short type;
    int lastframe;
    short tpageflag;
    short totbind;
    short xrep;
    short yrep;
    short twsta;
    short twend;
    int bindcode;
    int* repbind;
    PackedFile* packedfile;
    PreviewImage* preview;
    float lastupdate;
    int lastused;
    short animspeed;
    short pad2;
    int gen_x;
    int gen_y;
    char gen_type;
    char gen_flag;
    char gen_pad[2];
    float aspx;
    float aspy;
    ColorManagedColorspaceSettings colorspace_settings;
    char alpha_mode;
    char pad[7];
};
struct EnvMap {
    struct Object* object;
    Image* ima;
    struct ImBuf* cube[6];
    float imat[16];
    float obimat[9];
    short type;
    short stype;
    float clipsta;
    float clipend;
    float viewscale;
    int notlay;
    short cuberes;
    short depth;
    int ok;
    int lastframe;
    short recalc;
    short lastsize;
};
struct CurveMapPoint {
    float x;
    float y;
    short flag;
    short shorty;
};
struct CurveMap {
    short totpoint;
    short flag;
    float range;
    float mintable;
    float maxtable;
    float ext_in[2];
    float ext_out[2];
    CurveMapPoint* curve;
    CurveMapPoint* table;
    CurveMapPoint* premultable;
};
struct CurveMapping {
    int flag;
    int cur;
    int preset;
    int changed_timestamp;
    rctf curr;
    rctf clipr;
    CurveMap cm[4];
    float black[3];
    float white[3];
    float bwmul[3];
    float sample[3];
};
struct PointDensity {
    short flag;
    short falloff_type;
    float falloff_softness;
    float radius;
    short source;
    short color_source;
    int totpoints;
    int pdpad;
    struct Object* object;
    int psys;
    short psys_cache_space;
    short ob_cache_space;
    void* point_tree;
    float* point_data;
    float noise_size;
    short noise_depth;
    short noise_influence;
    short noise_basis;
    short pdpad3[3];
    float noise_fac;
    float speed_scale;
    float falloff_speed_scale;
    float pdpad2;
    ColorBand* coba;
    CurveMapping* falloff_curve;
};
struct VoxelData {
    int resol[3];
    int interp_type;
    short file_format;
    short flag;
    short extend;
    short smoked_type;
    short data_type;
    short pad;
    int _pad;
    struct Object* object;
    float int_multiplier;
    int still_frame;
    char source_path[1024];
    float* dataset;
    int cachedframe;
    int ok;
};
struct OceanTex {
    struct Object* object;
    char oceanmod[64];
    int output;
    int pad;
};
struct Tex {
    ID id;
    AnimData* adt;
    float noisesize;
    float turbul;
    float bright;
    float contrast;
    float saturation;
    float rfac;
    float gfac;
    float bfac;
    float filtersize;
    float pad2;
    float mg_H;
    float mg_lacunarity;
    float mg_octaves;
    float mg_offset;
    float mg_gain;
    float dist_amount;
    float ns_outscale;
    float vn_w1;
    float vn_w2;
    float vn_w3;
    float vn_w4;
    float vn_mexp;
    short vn_distm;
    short vn_coltype;
    short noisedepth;
    short noisetype;
    short noisebasis;
    short noisebasis2;
    short imaflag;
    short flag;
    short type;
    short stype;
    float cropxmin;
    float cropymin;
    float cropxmax;
    float cropymax;
    int texfilter;
    int afmax;
    short xrepeat;
    short yrepeat;
    short extend;
    short fie_ima;
    int len;
    int frames;
    int offset;
    int sfra;
    float checkerdist;
    float nabla;
    float pad1;
    ImageUser iuser;
    bNodeTree* nodetree;
    Ipo* ipo;
    Image* ima;
    ColorBand* coba;
    EnvMap* env;
    PreviewImage* preview;
    PointDensity* pd;
    VoxelData* vd;
    OceanTex* ot;
    char use_nodes;
    char pad[7];
};
struct MTex {
    short texco;
    short mapto;
    short maptoneg;
    short blendtype;
    struct Object* object;
    Tex* tex;
    char uvname[64];
    char projx;
    char projy;
    char projz;
    char mapping;
    float ofs[3];
    float size[3];
    float rot;
    short texflag;
    short colormodel;
    short pmapto;
    short pmaptoneg;
    short normapspace;
    short which_output;
    char brush_map_mode;
    char pad[7];
    float r;
    float g;
    float b;
    float k;
    float def_var;
    float rt;
    float colfac;
    float varfac;
    float norfac;
    float dispfac;
    float warpfac;
    float colspecfac;
    float mirrfac;
    float alphafac;
    float difffac;
    float specfac;
    float emitfac;
    float hardfac;
    float raymirrfac;
    float translfac;
    float ambfac;
    float colemitfac;
    float colreflfac;
    float coltransfac;
    float densfac;
    float scatterfac;
    float reflfac;
    float timefac;
    float lengthfac;
    float clumpfac;
    float dampfac;
    float kinkfac;
    float roughfac;
    float padensfac;
    float gravityfac;
    float lifefac;
    float sizefac;
    float ivelfac;
    float fieldfac;
    float shadowfac;
    float zenupfac;
    float zendownfac;
    float blendfac;
};
struct Group {
    ID id;
    ListBase<> gobject;
    int layer;
    float dupli_ofs[3];
};
struct Material {
    ID id;
    AnimData* adt;
    short material_type;
    short flag;
    float r;
    float g;
    float b;
    float specr;
    float specg;
    float specb;
    float mirr;
    float mirg;
    float mirb;
    float ambr;
    float ambb;
    float ambg;
    float amb;
    float emit;
    float ang;
    float spectra;
    float ray_mirror;
    float alpha;
    float ref;
    float spec;
    float zoffs;
    float add;
    float translucency;
    VolumeSettings vol;
    GameSettings game;
    float fresnel_mir;
    float fresnel_mir_i;
    float fresnel_tra;
    float fresnel_tra_i;
    float filter;
    float tx_limit;
    float tx_falloff;
    short ray_depth;
    short ray_depth_tra;
    short har;
    char seed1;
    char seed2;
    float gloss_mir;
    float gloss_tra;
    short samp_gloss_mir;
    short samp_gloss_tra;
    float adapt_thresh_mir;
    float adapt_thresh_tra;
    float aniso_gloss_mir;
    float dist_mir;
    short fadeto_mir;
    short shade_flag;
    int mode;
    int mode_l;
    short flarec;
    short starc;
    short linec;
    short ringc;
    float hasize;
    float flaresize;
    float subsize;
    float flareboost;
    float strand_sta;
    float strand_end;
    float strand_ease;
    float strand_surfnor;
    float strand_min;
    float strand_widthfade;
    char strand_uvname[64];
    float sbias;
    float lbias;
    float shad_alpha;
    int septex;
    char rgbsel;
    char texact;
    char pr_type;
    char use_nodes;
    short pr_lamp;
    short pr_texture;
    short ml_flag;
    char mapflag;
    char pad;
    short diff_shader;
    short spec_shader;
    float roughness;
    float refrac;
    float param[4];
    float rms;
    float darkness;
    short texco;
    short mapto;
    ColorBand* ramp_col;
    ColorBand* ramp_spec;
    char rampin_col;
    char rampin_spec;
    char rampblend_col;
    char rampblend_spec;
    short ramp_show;
    short pad3;
    float rampfac_col;
    float rampfac_spec;
    MTex* mtex[18];
    bNodeTree* nodetree;
    Ipo* ipo;
    Group* group;
    PreviewImage* preview;
    float friction;
    float fh;
    float reflect;
    float fhdist;
    float xyfrict;
    short dynamode;
    short pad2;
    float sss_radius[3];
    float sss_col[3];
    float sss_error;
    float sss_scale;
    float sss_ior;
    float sss_colfac;
    float sss_texfac;
    float sss_front;
    float sss_back;
    short sss_flag;
    short sss_preset;
    int mapto_textured;
    short shadowonly_flag;
    short index;
    short vcol_alpha;
    short pad4[3];
    ListBase<> gpumaterial;
};
struct BulletSoftBody {
    int flag;
    float linStiff;
    float angStiff;
    float volume;
    int viterations;
    int piterations;
    int diterations;
    int citerations;
    float kSRHR_CL;
    float kSKHR_CL;
    float kSSHR_CL;
    float kSR_SPLT_CL;
    float kSK_SPLT_CL;
    float kSS_SPLT_CL;
    float kVCF;
    float kDP;
    float kDG;
    float kLF;
    float kPR;
    float kVC;
    float kDF;
    float kMT;
    float kCHR;
    float kKHR;
    float kSHR;
    float kAHR;
    int collisionflags;
    int numclusteriterations;
    float welding;
    float margin;
};
struct BoidSettings {
    int options;
    int last_state_id;
    float landing_smoothness;
    float height;
    float banking;
    float pitch;
    float health;
    float aggression;
    float strength;
    float accuracy;
    float range;
    float air_min_speed;
    float air_max_speed;
    float air_max_acc;
    float air_max_ave;
    float air_personal_space;
    float land_jump_speed;
    float land_max_speed;
    float land_max_acc;
    float land_max_ave;
    float land_personal_space;
    float land_stick_force;
    ListBase<> states;
};
struct SPHFluidSettings {
    float radius;
    float spring_k;
    float rest_length;
    float plasticity_constant;
    float yield_ratio;
    float plasticity_balance;
    float yield_balance;
    float viscosity_omega;
    float viscosity_beta;
    float stiffness_k;
    float stiffness_knear;
    float rest_density;
    float buoyancy;
    int flag;
    int spring_frames;
    short solver;
    short pad[3];
};
struct EffectorWeights {
    Group* group;
    float weight[14];
    float global_gravity;
    short flag;
    short rt[3];
    int pad;
};
struct ParticleDupliWeight {
    struct ParticleDupliWeight* next;
    struct ParticleDupliWeight* prev;
    struct Object* ob;
    short count;
    short flag;
    short index;
    short rt;
};
struct PartDeflect {
    int flag;
    short deflect;
    short forcefield;
    short falloff;
    short shape;
    short tex_mode;
    short kink;
    short kink_axis;
    short zdir;
    float f_strength;
    float f_damp;
    float f_flow;
    float f_size;
    float f_power;
    float maxdist;
    float mindist;
    float f_power_r;
    float maxrad;
    float minrad;
    float pdef_damp;
    float pdef_rdamp;
    float pdef_perm;
    float pdef_frict;
    float pdef_rfrict;
    float pdef_stickness;
    float absorption;
    float pdef_sbdamp;
    float pdef_sbift;
    float pdef_sboft;
    float clump_fac;
    float clump_pow;
    float kink_freq;
    float kink_shape;
    float kink_amp;
    float free_end;
    float tex_nabla;
    Tex* tex;
    struct RNG* rng;
    float f_noise;
    int seed;
    struct Object* f_source;
};
struct ParticleSettings {
    ID id;
    AnimData* adt;
    BoidSettings* boids;
    SPHFluidSettings* fluid;
    EffectorWeights* effector_weights;
    int flag;
    int rt;
    short type;
    short from;
    short distr;
    short texact;
    short phystype;
    short rotmode;
    short avemode;
    short reactevent;
    int draw;
    int pad1;
    short draw_as;
    short draw_size;
    short childtype;
    short pad2;
    short ren_as;
    short subframes;
    short draw_col;
    short draw_step;
    short ren_step;
    short hair_step;
    short keys_step;
    short adapt_angle;
    short adapt_pix;
    short disp;
    short omat;
    short interpolation;
    short integrator;
    short rotfrom;
    short kink;
    short kink_axis;
    short bb_align;
    short bb_uv_split;
    short bb_anim;
    short bb_split_offset;
    float bb_tilt;
    float bb_rand_tilt;
    float bb_offset[2];
    float bb_size[2];
    float bb_vel_head;
    float bb_vel_tail;
    float color_vec_max;
    short simplify_flag;
    short simplify_refsize;
    float simplify_rate;
    float simplify_transition;
    float simplify_viewport;
    float sta;
    float end;
    float lifetime;
    float randlife;
    float timetweak;
    float courant_target;
    float jitfac;
    float eff_hair;
    float grid_rand;
    float ps_offset;
    int totpart;
    int userjit;
    int grid_res;
    int effector_amount;
    short time_flag;
    short time_pad[3];
    float normfac;
    float obfac;
    float randfac;
    float partfac;
    float tanfac;
    float tanphase;
    float reactfac;
    float ob_vel[3];
    float avefac;
    float phasefac;
    float randrotfac;
    float randphasefac;
    float mass;
    float size;
    float randsize;
    float acc[3];
    float dragfac;
    float brownfac;
    float dampfac;
    float randlength;
    int child_nbr;
    int ren_child_nbr;
    float parents;
    float childsize;
    float childrandsize;
    float childrad;
    float childflat;
    float clumpfac;
    float clumppow;
    float kink_amp;
    float kink_freq;
    float kink_shape;
    float kink_flat;
    float kink_amp_clump;
    float rough1;
    float rough1_size;
    float rough2;
    float rough2_size;
    float rough2_thres;
    float rough_end;
    float rough_end_shape;
    float clength;
    float clength_thres;
    float parting_fac;
    float parting_min;
    float parting_max;
    float branch_thres;
    float draw_line[2];
    float path_start;
    float path_end;
    int trail_count;
    int keyed_loops;
    MTex* mtex[18];
    Group* dup_group;
    ListBase<ParticleDupliWeight> dupliweights;
    Group* eff_group;
    struct Object* dup_ob;
    struct Object* bb_ob;
    Ipo* ipo;
    PartDeflect* pd;
    PartDeflect* pd2;
    short use_modifier_stack;
    short pad[3];
};
struct ParticleKey {
    float co[3];
    float vel[3];
    float rot[4];
    float ave[3];
    float time;
};
struct HairKey {
    float co[3];
    float time;
    float weight;
    short editflag;
    short pad;
};
struct BoidData {
    float health;
    float acc[3];
    short state_id;
    short mode;
};
struct BoidParticle {
    struct Object* ground;
    BoidData data;
    float gravity[3];
    float wander[3];
    float rt;
};
struct ParticleData {
    ParticleKey state;
    ParticleKey prev_state;
    HairKey* hair;
    ParticleKey* keys;
    BoidParticle* boid;
    int totkey;
    float time;
    float lifetime;
    float dietime;
    int num;
    int num_dmcache;
    float fuv[4];
    float foffset;
    float size;
    float sphdensity;
    int pad;
    int hair_index;
    short flag;
    short alive;
};
struct ChildParticle {
    int num;
    int parent;
    int pa[4];
    float w[4];
    float fuv[4];
    float foffset;
    float rt;
};
struct ModifierData {
    struct ModifierData* next;
    struct ModifierData* prev;
    int type;
    int mode;
    int stackindex;
    int pad;
    char name[64];
    struct Scene* scene;
    char* error;
};
struct ClothSimSettings {
    struct LinkNode* cache;
    float mingoal;
    float Cdis;
    float Cvi;
    float gravity[3];
    float dt;
    float mass;
    float structural;
    float shear;
    float bending;
    float max_bend;
    float max_struct;
    float max_shear;
    float avg_spring_len;
    float timescale;
    float maxgoal;
    float eff_force_scale;
    float eff_wind_scale;
    float sim_time_old;
    float defgoal;
    float goalspring;
    float goalfrict;
    float velocity_smooth;
    float collider_friction;
    float vel_damping;
    int stepsPerFrame;
    int flags;
    int preroll;
    int maxspringlen;
    short solver_type;
    short vgroup_bend;
    short vgroup_mass;
    short vgroup_struct;
    short shapekey_rest;
    short presets;
    short reset;
    short pad;
    EffectorWeights* effector_weights;
};
struct ClothCollSettings {
    struct LinkNode* collision_list;
    float epsilon;
    float self_friction;
    float friction;
    float selfepsilon;
    float repel_force;
    float distance_repel;
    int flags;
    short self_loop_count;
    short loop_count;
    Group* group;
    short vgroup_selfcol;
    short pad;
    int pad2;
};
struct PointCache {
    struct PointCache* next;
    struct PointCache* prev;
    int flag;
    int step;
    int simframe;
    int startframe;
    int endframe;
    int editframe;
    int last_exact;
    int last_valid;
    int pad;
    int totpoint;
    int index;
    short compression;
    short rt;
    char name[64];
    char prev_name[64];
    char info[64];
    char path[1024];
    char* cached_frames;
    ListBase<> mem_cache;
    struct PTCacheEdit* edit;
    void* free_edit;
};
struct ClothModifierData {
    ModifierData modifier;
    struct Scene* scene;
    struct Cloth* clothObject;
    ClothSimSettings* sim_parms;
    ClothCollSettings* coll_parms;
    PointCache* point_cache;
    ListBase<> ptcaches;
};
struct ParticleSpring {
    float rest_length;
    int particle_index[2];
    int delete_flag;
};
struct ParticleSystem {
    struct ParticleSystem* next;
    struct ParticleSystem* prev;
    ParticleSettings* part;
    ParticleData* particles;
    ChildParticle* child;
    struct PTCacheEdit* edit;
    void* free_edit;
    struct ParticleCacheKey** pathcache;
    struct ParticleCacheKey** childcache;
    ListBase<> pathcachebufs;
    ListBase<> childcachebufs;
    ClothModifierData* clmd;
    struct DerivedMesh* hair_in_dm;
    struct DerivedMesh* hair_out_dm;
    struct Object* target_ob;
    struct Object* lattice;
    struct Object* parent;
    ListBase<> targets;
    char name[64];
    float imat[16];
    float cfra;
    float tree_frame;
    float bvhtree_frame;
    int seed;
    int child_seed;
    int flag;
    int totpart;
    int totunexist;
    int totchild;
    int totcached;
    int totchildcache;
    short recalc;
    short target_psys;
    short totkeyed;
    short bakespace;
    char bb_uvname[192];
    short vgroup[12];
    short vg_neg;
    short rt3;
    void* renderdata;
    PointCache* pointcache;
    ListBase<> ptcaches;
    ListBase<>* effectors;
    ParticleSpring* fluid_springs;
    int tot_fluidsprings;
    int alloc_fluidsprings;
    struct KDTree* tree;
    struct BVHTree* bvhtree;
    struct ParticleDrawData* pdd;
    float* frand;
    float dt_frac;
    float _pad;
};
struct SBVertex {
    float vec[4];
};
struct SoftBody {
    int totpoint;
    int totspring;
    struct BodyPoint* bpoint;
    struct BodySpring* bspring;
    char pad;
    char msg_lock;
    short msg_value;
    float nodemass;
    char namedVG_Mass[64];
    float grav;
    float mediafrict;
    float rklimit;
    float physics_speed;
    float goalspring;
    float goalfrict;
    float mingoal;
    float maxgoal;
    float defgoal;
    short vertgroup;
    char namedVG_Softgoal[64];
    short fuzzyness;
    float inspring;
    float infrict;
    char namedVG_Spring_K[64];
    int sfra;
    int efra;
    int interval;
    short local;
    short solverflags;
    SBVertex** keys;
    int totpointkey;
    int totkey;
    float secondspring;
    float colball;
    float balldamp;
    float ballstiff;
    short sbc_mode;
    short aeroedge;
    short minloops;
    short maxloops;
    short choke;
    short solver_ID;
    short plastic;
    short springpreload;
    struct SBScratch* scratch;
    float shearstiff;
    float inpush;
    PointCache* pointcache;
    ListBase<> ptcaches;
    EffectorWeights* effector_weights;
    float lcom[3];
    float lrot[9];
    float lscale[9];
    int last_frame;
};
struct FluidsimModifierData {
    ModifierData modifier;
    struct FluidsimSettings* fss;
    PointCache* point_cache;
};
struct KeyBlock {
    struct KeyBlock* next;
    struct KeyBlock* prev;
    float pos;
    float curval;
    short type;
    short pad1;
    short relative;
    short flag;
    int totelem;
    int uid;
    void* data;
    float* weights;
    char name[64];
    char vgroup[64];
    float slidermin;
    float slidermax;
};
struct Key {
    ID id;
    AnimData* adt;
    KeyBlock* refkey;
    char elemstr[32];
    int elemsize;
    int pad;
    ListBase<> block;
    Ipo* ipo;
    ID* from;
    short type;
    short totkey;
    short slurph;
    short flag;
    float ctime;
    int uidgen;
};
struct MSelect {
    int index;
    int type;
};
struct MPoly {
    int loopstart;
    int totloop;
    short mat_nr;
    char flag;
    char pad;
};
struct MTexPoly {
    Image* tpage;
    char flag;
    char transp;
    short mode;
    short tile;
    short pad;
};
struct MLoop {
    int v;
    int e;
};
struct MLoopUV {
    float uv[2];
    int flag;
};
struct MLoopCol {
    char r;
    char g;
    char b;
    char a;
};
struct MFace {
    int v1;
    int v2;
    int v3;
    int v4;
    short mat_nr;
    char edcode;
    char flag;
};
struct MTFace {
    float uv[8];
    Image* tpage;
    char flag;
    char transp;
    short mode;
    short tile;
    short unwrap;
};
struct TFace {
    void* tpage;
    float uv[8];
    int col[4];
    char flag;
    char transp;
    short mode;
    short tile;
    short unwrap;
};
struct MVert {
    float co[3];
    short no[3];
    char flag;
    char bweight;
};
struct MEdge {
    int v1;
    int v2;
    char crease;
    char bweight;
    short flag;
};
struct MDeformWeight {
    int def_nr;
    float weight;
};
struct MDeformVert {
    MDeformWeight* dw;
    int totweight;
    int flag;
};
struct MCol {
    char a;
    char r;
    char g;
    char b;
};
struct CustomDataLayer {
    int type;
    int offset;
    int flag;
    int active;
    int active_rnd;
    int active_clone;
    int active_mask;
    int uid;
    char name[64];
    void* data;
};
struct CustomDataExternal {
    char filename[1024];
};
struct CustomData {
    CustomDataLayer* layers;
    int typemap[39];
    int totlayer;
    int maxlayer;
    int totsize;
    void* pool;
    CustomDataExternal* external;
};
struct Multires {
    ListBase<> levels;
    MVert* verts;
    char level_count;
    char current;
    char newlvl;
    char edgelvl;
    char pinlvl;
    char renderlvl;
    char use_col;
    char flag;
    CustomData vdata;
    CustomData fdata;
    short* edge_flags;
    char* edge_creases;
};
struct Mesh {
    ID id;
    AnimData* adt;
    BoundBox* bb;
    Ipo* ipo;
    Key* key;
    Material** mat;
    MSelect* mselect;
    MPoly* mpoly;
    MTexPoly* mtpoly;
    MLoop* mloop;
    MLoopUV* mloopuv;
    MLoopCol* mloopcol;
    MFace* mface;
    MTFace* mtface;
    TFace* tface;
    MVert* mvert;
    MEdge* medge;
    MDeformVert* dvert;
    MCol* mcol;
    struct Mesh* texcomesh;
    struct BMEditMesh* edit_btmesh;
    CustomData vdata;
    CustomData edata;
    CustomData fdata;
    CustomData pdata;
    CustomData ldata;
    int totvert;
    int totedge;
    int totface;
    int totselect;
    int totpoly;
    int totloop;
    int act_face;
    float loc[3];
    float size[3];
    float rot[3];
    int drawflag;
    short texflag;
    short pad2[3];
    short smoothresh;
    short flag;
    char cd_flag;
    char pad;
    char subdiv;
    char subdivr;
    char subsurftype;
    char editflag;
    short totcol;
    Multires* mr;
};
struct FluidVertexVelocity {
    float vel[3];
};
struct FluidsimSettings {
    FluidsimModifierData* fmd;
    int threads;
    int pad1;
    short type;
    short show_advancedoptions;
    short resolutionxyz;
    short previewresxyz;
    float realsize;
    short guiDisplayMode;
    short renderDisplayMode;
    float viscosityValue;
    short viscosityMode;
    short viscosityExponent;
    float grav[3];
    float animStart;
    float animEnd;
    int bakeStart;
    int bakeEnd;
    int frameOffset;
    int pad2;
    float gstar;
    int maxRefine;
    float iniVelx;
    float iniVely;
    float iniVelz;
    Mesh* orgMesh;
    Mesh* meshBB;
    char surfdataPath[1024];
    float bbStart[3];
    float bbSize[3];
    Ipo* ipo;
    short typeFlags;
    char domainNovecgen;
    char volumeInitType;
    float partSlipValue;
    int generateTracers;
    float generateParticles;
    float surfaceSmoothing;
    int surfaceSubdivs;
    int flag;
    float particleInfSize;
    float particleInfAlpha;
    float farFieldSize;
    FluidVertexVelocity* meshVelocities;
    int totvert;
    float cpsTimeStart;
    float cpsTimeEnd;
    float cpsQuality;
    float attractforceStrength;
    float attractforceRadius;
    float velocityforceStrength;
    float velocityforceRadius;
    int lastgoodframe;
    float animRate;
};
struct RigidBodyOb {
    void* physics_object;
    void* physics_shape;
    short type;
    short shape;
    int flag;
    int col_groups;
    int pad;
    float mass;
    float friction;
    float restitution;
    float margin;
    float lin_damping;
    float ang_damping;
    float lin_sleep_thresh;
    float ang_sleep_thresh;
    float orn[4];
    float pos[3];
    float pad1;
};
struct RigidBodyCon {
    struct Object* ob1;
    struct Object* ob2;
    short type;
    short num_solver_iterations;
    int flag;
    float breaking_threshold;
    float pad;
    float limit_lin_x_lower;
    float limit_lin_x_upper;
    float limit_lin_y_lower;
    float limit_lin_y_upper;
    float limit_lin_z_lower;
    float limit_lin_z_upper;
    float limit_ang_x_lower;
    float limit_ang_x_upper;
    float limit_ang_y_lower;
    float limit_ang_y_upper;
    float limit_ang_z_lower;
    float limit_ang_z_upper;
    float spring_stiffness_x;
    float spring_stiffness_y;
    float spring_stiffness_z;
    float spring_damping_x;
    float spring_damping_y;
    float spring_damping_z;
    float motor_lin_target_velocity;
    float motor_ang_target_velocity;
    float motor_lin_max_impulse;
    float motor_ang_max_impulse;
    void* physics_constraint;
};
struct Object {
    ID id;
    AnimData* adt;
    struct SculptSession* sculpt;
    short type;
    short partype;
    int par1;
    int par2;
    int par3;
    char parsubstr[64];
    struct Object* parent;
    struct Object* track;
    struct Object* proxy;
    struct Object* proxy_group;
    struct Object* proxy_from;
    Ipo* ipo;
    BoundBox* bb;
    bAction* action;
    bAction* poselib;
    bPose* pose;
    void* data;
    bGPdata* gpd;
    bAnimVizSettings avs;
    bMotionPath* mpath;
    ListBase<> constraintChannels;
    ListBase<> effect;
    ListBase<> disp;
    ListBase<> defbase;
    ListBase<> modifiers;
    int mode;
    int restore_mode;
    Material** mat;
    char* matbits;
    int totcol;
    int actcol;
    float loc[3];
    float dloc[3];
    float orig[3];
    float size[3];
    float dsize[3];
    float dscale[3];
    float rot[3];
    float drot[3];
    float quat[4];
    float dquat[4];
    float rotAxis[3];
    float drotAxis[3];
    float rotAngle;
    float drotAngle;
    float obmat[16];
    float parentinv[16];
    float constinv[16];
    float imat[16];
    float imat_ren[16];
    int lay;
    float sf;
    short flag;
    short colbits;
    short transflag;
    short protectflag;
    short trackflag;
    short upflag;
    short nlaflag;
    short ipoflag;
    short scaflag;
    char scavisflag;
    char depsflag;
    int dupon;
    int dupoff;
    int dupsta;
    int dupend;
    float mass;
    float damping;
    float inertia;
    float formfactor;
    float rdamping;
    float sizefac;
    float margin;
    float max_vel;
    float min_vel;
    float m_contactProcessingThreshold;
    float obstacleRad;
    float step_height;
    float jump_speed;
    float fall_speed;
    short col_group;
    short col_mask;
    short rotmode;
    char boundtype;
    char collision_boundtype;
    short dtx;
    char dt;
    char empty_drawtype;
    float empty_drawsize;
    float dupfacesca;
    ListBase<> prop;
    ListBase<> sensors;
    ListBase<> controllers;
    ListBase<> actuators;
    float bbsize[3];
    short index;
    short actdef;
    float col[4];
    int gameflag;
    int gameflag2;
    BulletSoftBody* bsoft;
    char restrictflag;
    char recalc;
    short softflag;
    float anisotropicFriction[3];
    ListBase<> constraints;
    ListBase<> nlastrips;
    ListBase<> hooks;
    ListBase<ParticleSystem> particlesystem;
    PartDeflect* pd;
    SoftBody* soft;
    Group* dup_group;
    char body_type;
    char shapeflag;
    short shapenr;
    float smoothresh;
    FluidsimSettings* fluidsimSettings;
    struct DerivedMesh* derivedDeform;
    struct DerivedMesh* derivedFinal;
    int* pad;
    uint64 lastDataMask;
    uint64 customdata_mask;
    int state;
    int init_state;
    ListBase<> gpulamp;
    ListBase<> pc_ids;
    ListBase<>* duplilist;
    RigidBodyOb* rigidbody_object;
    RigidBodyCon* rigidbody_constraint;
    float ima_ofs[2];
};
struct World {
    ID id;
    AnimData* adt;
    short colormodel;
    short totex;
    short texact;
    short mistype;
    float horr;
    float horg;
    float horb;
    float zenr;
    float zeng;
    float zenb;
    float ambr;
    float ambg;
    float ambb;
    float exposure;
    float exp;
    float range;
    float linfac;
    float logfac;
    float gravity;
    float activityBoxRadius;
    short skytype;
    short mode;
    short occlusionRes;
    short physicsEngine;
    short ticrate;
    short maxlogicstep;
    short physubstep;
    short maxphystep;
    float misi;
    float miststa;
    float mistdist;
    float misthi;
    float starr;
    float starg;
    float starb;
    float stark;
    float starsize;
    float starmindist;
    float stardist;
    float starcolnoise;
    short dofsta;
    short dofend;
    short dofmin;
    short dofmax;
    float aodist;
    float aodistfac;
    float aoenergy;
    float aobias;
    short aomode;
    short aosamp;
    short aomix;
    short aocolor;
    float ao_adapt_thresh;
    float ao_adapt_speed_fac;
    float ao_approx_error;
    float ao_approx_correction;
    float ao_indirect_energy;
    float ao_env_energy;
    float ao_pad2;
    short ao_indirect_bounces;
    short ao_pad;
    short ao_samp_method;
    short ao_gather_method;
    short ao_approx_passes;
    short flag;
    float* aosphere;
    float* aotables;
    Ipo* ipo;
    MTex* mtex[18];
    short pr_texture;
    short use_nodes;
    short pad[2];
    PreviewImage* preview;
    bNodeTree* nodetree;
};
struct Base {
    struct Base* next;
    struct Base* prev;
    int lay;
    int selcol;
    int flag;
    short sx;
    short sy;
    Object* object;
};
struct StripElem {
    char name[256];
    int orig_width;
    int orig_height;
};
struct StripProxy {
    char dir[768];
    char file[256];
    struct anim* anim;
    short tc;
    short quality;
    short build_size_flags;
    short build_tc_flags;
};
struct StripCrop {
    int top;
    int bottom;
    int left;
    int right;
};
struct StripTransform {
    int xofs;
    int yofs;
};
struct StripColorBalance {
    float lift[3];
    float gamma[3];
    float gain[3];
    int flag;
    int pad;
};
struct Strip {
    struct Strip* next;
    struct Strip* prev;
    int us;
    int done;
    int startstill;
    int endstill;
    StripElem* stripdata;
    char dir[768];
    StripProxy* proxy;
    StripCrop* crop;
    StripTransform* transform;
    StripColorBalance* color_balance;
    ColorManagedColorspaceSettings colorspace_settings;
};
struct MovieTrackingSettings {
    int flag;
    short default_motion_model;
    short default_algorithm_flag;
    float default_minimum_correlation;
    short default_pattern_size;
    short default_search_size;
    short default_frames_limit;
    short default_margin;
    short default_pattern_match;
    short default_flag;
    short motion_flag;
    short speed;
    int keyframe1;
    int keyframe2;
    float reconstruction_success_threshold;
    int reconstruction_flag;
    short refine_camera_intrinsics;
    short pad2;
    float dist;
    int clean_frames;
    int clean_action;
    float clean_error;
    float object_distance;
    int pad3;
};
struct MovieTrackingCamera {
    void* intrinsics;
    float sensor_width;
    float pixel_aspect;
    float pad;
    float focal;
    short units;
    short pad1;
    float principal[2];
    float k1;
    float k2;
    float k3;
};
struct MovieReconstructedCamera {
    int framenr;
    float error;
    float mat[16];
};
struct MovieTrackingReconstruction {
    int flag;
    float error;
    int last_camera;
    int camnr;
    MovieReconstructedCamera* cameras;
};
struct MovieTrackingMarker {
    float pos[2];
    float pattern_corners[8];
    float search_min[2];
    float search_max[2];
    int framenr;
    int flag;
};
struct MovieTrackingTrack {
    struct MovieTrackingTrack* next;
    struct MovieTrackingTrack* prev;
    char name[64];
    float pat_min[2];
    float pat_max[2];
    float search_min[2];
    float search_max[2];
    float offset[2];
    int markersnr;
    int last_marker;
    MovieTrackingMarker* markers;
    float bundle_pos[3];
    float error;
    int flag;
    int pat_flag;
    int search_flag;
    float color[3];
    short frames_limit;
    short margin;
    short pattern_match;
    short motion_model;
    int algorithm_flag;
    float minimum_correlation;
    bGPdata* gpd;
};
struct MovieTrackingStabilization {
    int flag;
    int tot_track;
    int act_track;
    float maxscale;
    MovieTrackingTrack* rot_track;
    float locinf;
    float scaleinf;
    float rotinf;
    int filter;
    int ok;
    float scale;
};
struct MovieTrackingStats {
    char message[256];
};
struct MovieTrackingDopesheet {
    int ok;
    short sort_method;
    short flag;
    ListBase<> coverage_segments;
    ListBase<> channels;
    int tot_channel;
    int pad;
};
struct MovieTracking {
    MovieTrackingSettings settings;
    MovieTrackingCamera camera;
    ListBase<> tracks;
    MovieTrackingReconstruction reconstruction;
    MovieTrackingStabilization stabilization;
    MovieTrackingTrack* act_track;
    ListBase<> objects;
    int objectnr;
    int tot_object;
    MovieTrackingStats* stats;
    MovieTrackingDopesheet dopesheet;
};
struct MovieClipProxy {
    char dir[768];
    short tc;
    short quality;
    short build_size_flag;
    short build_tc_flag;
};
struct MovieClip {
    ID id;
    AnimData* adt;
    char name[1024];
    int source;
    int lastframe;
    int lastsize[2];
    float aspx;
    float aspy;
    struct anim* anim;
    struct MovieClipCache* cache;
    bGPdata* gpd;
    MovieTracking tracking;
    void* tracking_context;
    MovieClipProxy proxy;
    int flag;
    int len;
    int start_frame;
    int frame_offset;
    ColorManagedColorspaceSettings colorspace_settings;
};
struct Mask {
    ID id;
    AnimData* adt;
    ListBase<> masklayers;
    int masklay_act;
    int masklay_tot;
    int sfra;
    int efra;
    int flag;
    int pad;
};
struct bSound {
    ID id;
    char name[1024];
    PackedFile* packedfile;
    void* handle;
    PackedFile* newpackedfile;
    Ipo* ipo;
    float volume;
    float attenuation;
    float pitch;
    float min_gain;
    float max_gain;
    float distance;
    int flags;
    int pad;
    void* cache;
    void* waveform;
    void* playback_handle;
};
struct Sequence {
    struct Sequence* next;
    struct Sequence* prev;
    void* tmp;
    void* lib;
    char name[64];
    int flag;
    int type;
    int len;
    int start;
    int startofs;
    int endofs;
    int startstill;
    int endstill;
    int machine;
    int depth;
    int startdisp;
    int enddisp;
    float sat;
    float mul;
    float handsize;
    short anim_preseek;
    short streamindex;
    int multicam_source;
    int clip_flag;
    Strip* strip;
    Ipo* ipo;
    struct Scene* scene;
    Object* scene_camera;
    MovieClip* clip;
    Mask* mask;
    struct anim* anim;
    float effect_fader;
    float speed_fader;
    struct Sequence* seq1;
    struct Sequence* seq2;
    struct Sequence* seq3;
    ListBase<> seqbase;
    bSound* sound;
    void* scene_sound;
    float volume;
    float pitch;
    float pan;
    float strobe;
    void* effectdata;
    int anim_startofs;
    int anim_endofs;
    int blend_mode;
    float blend_opacity;
    int sfra;
    char alpha_mode;
    char pad[3];
    ListBase<> modifiers;
};
struct Editing {
    ListBase<>* seqbasep;
    ListBase<> seqbase;
    ListBase<> metastack;
    Sequence* act_seq;
    char act_imagedir[1024];
    char act_sounddir[1024];
    int over_ofs;
    int over_cfra;
    int over_flag;
    int pad;
    rctf over_border;
};
struct BrushClone {
    Image* image;
    float offset[2];
    float alpha;
    float pad;
};
struct Brush {
    ID id;
    BrushClone clone;
    CurveMapping* curve;
    MTex mtex;
    MTex mask_mtex;
    struct Brush* toggle_brush;
    struct ImBuf* icon_imbuf;
    PreviewImage* preview;
    char icon_filepath[1024];
    float normal_weight;
    short blend;
    short ob_mode;
    float weight;
    int size;
    int flag;
    float jitter;
    int jitter_absolute;
    int overlay_flags;
    int spacing;
    int smooth_stroke_radius;
    float smooth_stroke_factor;
    float rate;
    float rgb[3];
    float alpha;
    int sculpt_plane;
    float plane_offset;
    char sculpt_tool;
    char vertexpaint_tool;
    char imagepaint_tool;
    char mask_tool;
    float autosmooth_factor;
    float crease_pinch_factor;
    float plane_trim;
    float height;
    float texture_sample_bias;
    int texture_overlay_alpha;
    int mask_overlay_alpha;
    int cursor_overlay_alpha;
    float unprojected_radius;
    float add_col[3];
    float sub_col[3];
    float stencil_pos[2];
    float stencil_dimension[2];
    float mask_stencil_pos[2];
    float mask_stencil_dimension[2];
};
struct Paint {
    Brush* brush;
    void* paint_cursor;
    char paint_cursor_col[4];
    int flags;
    int num_input_samples;
    int pad;
};
struct VPaint {
    Paint paint;
    short flag;
    short pad;
    int tot;
    int* vpaint_prev;
    MDeformVert* wpaint_prev;
    void* paintcursor;
};
struct Sculpt {
    Paint paint;
    int flags;
    int radial_symm[3];
    int detail_size;
    int symmetrize_direction;
};
struct UvSculpt {
    Paint paint;
};
struct ImagePaintSettings {
    Paint paint;
    short flag;
    short pad;
    short seam_bleed;
    short normal_angle;
    short screen_grab_size[2];
    int pad1;
    void* paintcursor;
};
struct ParticleBrushData {
    short size;
    short step;
    short invert;
    short count;
    int flag;
    float strength;
};
struct ParticleEditSettings {
    short flag;
    short totrekey;
    short totaddkey;
    short brushtype;
    ParticleBrushData brush[7];
    void* paintcursor;
    float emitterdist;
    float rt;
    int selectmode;
    int edittype;
    int draw_step;
    int fade_frames;
    struct Scene* scene;
    Object* object;
};
struct UnifiedPaintSettings {
    int size;
    float unprojected_radius;
    float alpha;
    float weight;
    int flag;
    float last_rake[2];
    int pad;
    float brush_rotation;
    int draw_anchored;
    int anchored_size;
    float anchored_initial_mouse[2];
    int draw_pressure;
    float pressure_value;
    float tex_mouse[2];
    float mask_tex_mouse[2];
    float pixel_radius;
};
struct MeshStatVis {
    char type;
    char _pad1[2];
    char overhang_axis;
    float overhang_min;
    float overhang_max;
    float thickness_min;
    float thickness_max;
    char thickness_samples;
    char _pad2[3];
    float distort_min;
    float distort_max;
    float sharp_min;
    float sharp_max;
};
struct ToolSettings {
    VPaint* vpaint;
    VPaint* wpaint;
    Sculpt* sculpt;
    UvSculpt* uvsculpt;
    float vgroup_weight;
    short cornertype;
    short pad1;
    float jointrilimit;
    float degr;
    short step;
    short turn;
    float extr_offs;
    float doublimit;
    float normalsize;
    short automerge;
    short selectmode;
    short segments;
    short rings;
    short vertices;
    short unwrapper;
    float uvcalc_radius;
    float uvcalc_cubesize;
    float uvcalc_margin;
    short uvcalc_mapdir;
    short uvcalc_mapalign;
    short uvcalc_flag;
    short uv_flag;
    short uv_selectmode;
    short pad2;
    short gpencil_flags;
    short autoik_chainlen;
    ImagePaintSettings imapaint;
    ParticleEditSettings particle;
    float proportional_size;
    float select_thresh;
    float clean_thresh;
    short autokey_mode;
    short autokey_flag;
    char multires_subdiv_type;
    char pad3[5];
    short skgen_resolution;
    float skgen_threshold_internal;
    float skgen_threshold_external;
    float skgen_length_ratio;
    float skgen_length_limit;
    float skgen_angle_limit;
    float skgen_correlation_limit;
    float skgen_symmetry_limit;
    float skgen_retarget_angle_weight;
    float skgen_retarget_length_weight;
    float skgen_retarget_distance_weight;
    short skgen_options;
    char skgen_postpro;
    char skgen_postpro_passes;
    char skgen_subdivisions[3];
    char skgen_multi_level;
    Object* skgen_template;
    char bone_sketching;
    char bone_sketching_convert;
    char skgen_subdivision_number;
    char skgen_retarget_options;
    char skgen_retarget_roll;
    char skgen_side_string[8];
    char skgen_num_string[8];
    char edge_mode;
    char edge_mode_live_unwrap;
    char snap_mode;
    char snap_node_mode;
    char snap_uv_mode;
    short snap_flag;
    short snap_target;
    short proportional;
    short prop_mode;
    char proportional_objects;
    char proportional_mask;
    char auto_normalize;
    char multipaint;
    char weightuser;
    char vgroupsubset;
    int use_uv_sculpt;
    int uv_sculpt_settings;
    int uv_sculpt_tool;
    int uv_relax_method;
    short sculpt_paint_settings;
    short pad5;
    int sculpt_paint_unified_size;
    float sculpt_paint_unified_unprojected_radius;
    float sculpt_paint_unified_alpha;
    UnifiedPaintSettings unified_paint_settings;
    MeshStatVis statvis;
};
struct ColorManagedViewSettings {
    int flag;
    int pad;
    char view_transform[64];
    float exposure;
    float gamma;
    CurveMapping* curve_mapping;
    void* pad2;
};
struct ColorManagedDisplaySettings {
    char display_device[64];
};
struct ImageFormatData {
    char imtype;
    char depth;
    char planes;
    char flag;
    char quality;
    char compress;
    char exr_codec;
    char cineon_flag;
    short cineon_white;
    short cineon_black;
    float cineon_gamma;
    char jp2_flag;
    char jp2_codec;
    char pad[6];
    ColorManagedViewSettings view_settings;
    ColorManagedDisplaySettings display_settings;
};
struct AviCodecData {
    void* lpFormat;
    void* lpParms;
    int cbFormat;
    int cbParms;
    int fccType;
    int fccHandler;
    int dwKeyFrameEvery;
    int dwQuality;
    int dwBytesPerSecond;
    int dwFlags;
    int dwInterleaveEvery;
    int pad;
    char avicodecname[128];
};
struct QuicktimeCodecData {
    void* cdParms;
    void* pad;
    int cdSize;
    int pad2;
    char qtcodecname[128];
};
struct QuicktimeCodecSettings {
    int codecType;
    int codecSpatialQuality;
    int codec;
    int codecFlags;
    int colorDepth;
    int codecTemporalQuality;
    int minSpatialQuality;
    int minTemporalQuality;
    int keyFrameRate;
    int bitRate;
    int audiocodecType;
    int audioSampleRate;
    short audioBitDepth;
    short audioChannels;
    int audioCodecFlags;
    int audioBitRate;
    int pad1;
};
struct FFMpegCodecData {
    int type;
    int codec;
    int audio_codec;
    int video_bitrate;
    int audio_bitrate;
    int audio_mixrate;
    int audio_channels;
    int audio_pad;
    float audio_volume;
    int gop_size;
    int flags;
    int rc_min_rate;
    int rc_max_rate;
    int rc_buffer_size;
    int mux_packet_size;
    int mux_rate;
    IDProperty* properties;
};
struct rcti {
    int xmin;
    int xmax;
    int ymin;
    int ymax;
};
struct TextLine {
    struct TextLine* next;
    struct TextLine* prev;
    char* line;
    char* format;
    int len;
    int blen;
};
struct Text {
    ID id;
    char* name;
    int flags;
    int nlines;
    ListBase<> lines;
    TextLine* curl;
    TextLine* sell;
    int curc;
    int selc;
    char* undo_buf;
    int undo_pos;
    int undo_len;
    void* compiled;
    double mtime;
};
struct RenderData {
    ImageFormatData im_format;
    AviCodecData* avicodecdata;
    QuicktimeCodecData* qtcodecdata;
    QuicktimeCodecSettings qtcodecsettings;
    FFMpegCodecData ffcodecdata;
    int cfra;
    int sfra;
    int efra;
    float subframe;
    int psfra;
    int pefra;
    int images;
    int framapto;
    short flag;
    short threads;
    float framelen;
    float blurfac;
    float edgeR;
    float edgeG;
    float edgeB;
    short fullscreen;
    short xplay;
    short yplay;
    short freqplay;
    short depth;
    short attrib;
    int frame_step;
    short stereomode;
    short dimensionspreset;
    short filtertype;
    short size;
    short maximsize;
    short pad6;
    int xsch;
    int ysch;
    short xparts;
    short yparts;
    int tilex;
    int tiley;
    short planes;
    short imtype;
    short subimtype;
    short quality;
    short displaymode;
    short pad7;
    int scemode;
    int mode;
    int raytrace_options;
    short raytrace_structure;
    short pad1;
    short ocres;
    short pad4;
    short alphamode;
    short osa;
    short frs_sec;
    short edgeint;
    rctf safety;
    rctf border;
    rcti disprect;
    ListBase<> layers;
    short actlay;
    short mblur_samples;
    float xasp;
    float yasp;
    float frs_sec_base;
    float gauss;
    int color_mgt_flag;
    float postgamma;
    float posthue;
    float postsat;
    float dither_intensity;
    short bake_osa;
    short bake_filter;
    short bake_mode;
    short bake_flag;
    short bake_normal_space;
    short bake_quad_split;
    float bake_maxdist;
    float bake_biasdist;
    short bake_samples;
    short bake_pad;
    char pic[1024];
    int stamp;
    short stamp_font_id;
    short pad3;
    char stamp_udata[768];
    float fg_stamp[4];
    float bg_stamp[4];
    char seq_prev_type;
    char seq_rend_type;
    char seq_flag;
    char pad5[5];
    int simplify_flag;
    short simplify_subsurf;
    short simplify_shadowsamples;
    float simplify_particles;
    float simplify_aosss;
    short cineonwhite;
    short cineonblack;
    float cineongamma;
    short jp2_preset;
    short jp2_depth;
    int rpad3;
    short domeres;
    short domemode;
    short domeangle;
    short dometilt;
    float domeresbuf;
    float pad2;
    Text* dometext;
    int line_thickness_mode;
    float unit_line_thickness;
    char engine[32];
};
struct AudioData {
    int mixrate;
    float main;
    float speed_of_sound;
    float doppler_factor;
    int distance_model;
    short flag;
    short pad;
    float volume;
    float pad2;
};
struct GameFraming {
    float col[3];
    char type;
    char pad1;
    char pad2;
    char pad3;
};
struct GameDome {
    short res;
    short mode;
    short angle;
    short tilt;
    float resbuf;
    float pad2;
    Text* warptext;
};
struct RecastData {
    float cellsize;
    float cellheight;
    float agentmaxslope;
    float agentmaxclimb;
    float agentheight;
    float agentradius;
    float edgemaxlen;
    float edgemaxerror;
    float regionminsize;
    float regionmergesize;
    int vertsperpoly;
    float detailsampledist;
    float detailsamplemaxerror;
    short pad1;
    short pad2;
};
struct GameData {
    GameFraming framing;
    short playerflag;
    short xplay;
    short yplay;
    short freqplay;
    short depth;
    short attrib;
    short rt1;
    short rt2;
    short aasamples;
    short pad4[3];
    GameDome dome;
    short stereoflag;
    short stereomode;
    float eyeseparation;
    RecastData recastData;
    float gravity;
    float activityBoxRadius;
    int flag;
    short mode;
    short matmode;
    short occlusionRes;
    short physicsEngine;
    short exitkey;
    short pad;
    short ticrate;
    short maxlogicstep;
    short physubstep;
    short maxphystep;
    short obstacleSimulation;
    short raster_storage;
    float levelHeight;
    float deactivationtime;
    float lineardeactthreshold;
    float angulardeactthreshold;
    float pad2;
};
struct UnitSettings {
    float scale_length;
    char system;
    char system_rotation;
    short flag;
};
struct PhysicsSettings {
    float gravity[3];
    int flag;
    int quick_cache_step;
    int rt;
};
struct RigidBodyWorld {
    EffectorWeights* effector_weights;
    Group* group;
    Object** objects;
    Group* constraints;
    int pad;
    float ltime;
    PointCache* pointcache;
    ListBase<> ptcaches;
    int numbodies;
    short steps_per_second;
    short num_solver_iterations;
    int flag;
    float time_scale;
    void* physics_world;
};
struct Scene {
    ID id;
    AnimData* adt;
    Object* camera;
    World* world;
    struct Scene* set;
    ListBase<Base> base;
    Base* basact;
    Object* obedit;
    float cursor[3];
    float twcent[3];
    float twmin[3];
    float twmax[3];
    int lay;
    int layact;
    int lay_updated;
    short flag;
    short use_nodes;
    bNodeTree* nodetree;
    Editing* ed;
    ToolSettings* toolsettings;
    struct SceneStats* stats;
    RenderData r;
    AudioData audio;
    ListBase<> markers;
    ListBase<> transform_spaces;
    void* sound_scene;
    void* sound_scene_handle;
    void* sound_scrub_handle;
    void* speaker_handles;
    void* fps_info;
    struct DagForest* theDag;
    short dagflags;
    short recalc;
    int active_keyingset;
    ListBase<> keyingsets;
    GameFraming framing;
    GameData gm;
    UnitSettings unit;
    bGPdata* gpd;
    PhysicsSettings physics_settings;
    MovieClip* clip;
    uint64 customdata_mask;
    uint64 customdata_mask_modal;
    ColorManagedViewSettings view_settings;
    ColorManagedDisplaySettings display_settings;
    ColorManagedColorspaceSettings sequencer_colorspace_settings;
    RigidBodyWorld* rigidbody_world;
};
