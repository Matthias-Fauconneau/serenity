transform {
 varying vec3 vPosition;
 varying vec3 objectPosition;
 vertex {
  uniform mat4 modelViewTransform;
  attribute vec3 aPosition;
  gl_Position = modelViewTransform*vec4(aPosition,1);
  uniform mat4 modelTransform;
  vPosition = (modelTransform*vec4(aPosition,1)).xyz;
  objectPosition = aPosition;
 }
}

screen {
 varying vec2 texCoords;
 vertex {
  attribute vec2 position;
  gl_Position = vec4(position,0,1);
  texCoords = (position+1)/2;
 }
}

normal {
 varying vec3 vNormal;
 varying vec3 nodeNormal;
 vertex {
  uniform mat3 normalMatrix;
  attribute vec3 aNormal;
  vNormal = normalMatrix*aNormal;
  nodeNormal = aNormal;
 }
 fragment {
  vec3 normal = normalize(vNormal);
 }
}

texCoord {
 varying vec2 vTexCoords;
 vertex {
  attribute vec2 aTexCoords;
  vTexCoords = aTexCoords;
 }
}

diffuse {
 fragment {
  vec3 diffuseLight = vec3(0,0,0);
 }
}

shadow {
 uniform float shadowScale;
 varying vec4 shadowPosition;
 vertex {
  uniform mat4 shadowTransform;
  shadowPosition = shadowTransform*vec4(aPosition,1);
 }
 fragment {
  uniform sampler2DShadow shadowMap;
  /*float shadowLight = 0;
  for(float i=-0.5; i<=0.5; i++) for(float j=-0.5; j<=0.5; j++) //2x2 PCF + 2x2 HW PCF
     shadowLight += shadow2DProj(shadowMap,
     vec4((shadowPosition.xy+vec2(i,j)*shadowScale)*shadowPosition.w,shadowPosition.z-0.001,shadowPosition.w)).r;
  shadowLight /= 4;*/
  float shadowLight = shadow2DProj(shadowMap,
       vec4(shadowPosition.xy*shadowPosition.w,shadowPosition.z-2/1024,shadowPosition.w)).r
 }
}

sun {
 fragment {
  const vec3 sunColor = vec3(1, 1, 1);
  uniform vec3 sunLightDirection;
  diffuseLight += shadowLight * max(0,dot(sunLightDirection, normal)) * sunColor;
 }
}

sky {
 fragment {
  const vec3 skyColor = vec3(1, 1, 1);
  uniform vec3 skyLightDirection;
  diffuseLight += (1.f+dot(skyLightDirection, normal))/2.f * skyColor;
 }
}

fragment {
 out vec4 color;
 color = vec4(1);
 node {
  color = %;
 }
 sea_surfrace { color.rgb = vec3(0.8); }
 bird { color.rgb = vec3(0.05); }
 trunkshader_001 {
  uniform sampler2D bark07_512_1024_r;
  color.rgb = texture(bark07_512_1024_r, vTexCoords).rgb;
 }
 land {
  uniform sampler2D CliffGrassy;
  uniform sampler2D ForestFloor;
  color.rgb =
   mix(
    0.6*(texture(ForestFloor, objectPosition.xy/11.76).rgb-0.05),
    texture(CliffGrassy, objectPosition.xy/11.76).rgb,
    less(vec4(nodeNormal, 0).z, 0.70)
   );
  color.a = objectPosition.z;
 }
 trunkshader {
  uniform sampler2D european_beech_bark_r;
  color.rgb = texture(european_beech_bark_r, vTexCoords).rgb;
 }
 leafs1shader { color.rgb = vec3(0.54, 0.75, 0.24); }
 diffuse {
  color.rgb *= diffuseLight;
 }
}

skymap {
 varying vec3 viewRay;
 vertex {
  attribute vec2 position;
  gl_Position = vec4(position,0.999,1);
  uniform mat4 inverseViewMatrix;
  vec4 viewPos = (inverseViewMatrix * vec4(position.xy,1,1));
  viewRay = viewPos.xyz/viewPos.w;
 }
 fragment {
  uniform sampler2D Skymap_offworld_gen2;
  const float PI = 3.14159265358979323846;
  vec2 equirectangular = vec2(atan(viewRay.y,viewRay.x)/(2.0*PI), acos(normalize(viewRay).z)/PI);
  equirectangular.x = 0.5-equirectangular.x; // flip x
  color.rgb = texture2D(Skymap_offworld_gen2, equirectangular).rgb;
 }
}

present {
 fragment {
  uniform sampler2D framebuffer;
  float sRGB(float c) { if(c>=0.0031308) return 1.055*pow(c,1.0/2.4)-0.055; else return 12.92*c; }
  vec3 c = texture2D(framebuffer, texCoords).rgb;
  color.rgb = vec3(sRGB(c.r), sRGB(c.g), sRGB(c.b));
 }
}
